/* soapBaitourServiceSoapService.cpp
   Generated by gSOAP 2.8.16 from baitour.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapBaitourServiceSoapService.h"

BaitourServiceSoapService::BaitourServiceSoapService()
{	this->soap = soap_new();
	this->own = true;
	BaitourServiceSoapService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

BaitourServiceSoapService::BaitourServiceSoapService(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	BaitourServiceSoapService_init(_soap->imode, _soap->omode);
}

BaitourServiceSoapService::BaitourServiceSoapService(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	BaitourServiceSoapService_init(iomode, iomode);
}

BaitourServiceSoapService::BaitourServiceSoapService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	BaitourServiceSoapService_init(imode, omode);
}

BaitourServiceSoapService::~BaitourServiceSoapService()
{	if (this->own)
		soap_free(this->soap);
}

void BaitourServiceSoapService::BaitourServiceSoapService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://www.baitour.com/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
};

void BaitourServiceSoapService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void BaitourServiceSoapService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	BaitourServiceSoapService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
BaitourServiceSoapService *BaitourServiceSoapService::copy()
{	BaitourServiceSoapService *dup = SOAP_NEW_COPY(BaitourServiceSoapService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int BaitourServiceSoapService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int BaitourServiceSoapService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int BaitourServiceSoapService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int BaitourServiceSoapService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int BaitourServiceSoapService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int BaitourServiceSoapService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void BaitourServiceSoapService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void BaitourServiceSoapService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *BaitourServiceSoapService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void BaitourServiceSoapService::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *BaitourServiceSoapService::soap_header()
{	return this->soap->header;
}

int BaitourServiceSoapService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->soap->error;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	else
		return this->soap->error;
	return SOAP_OK;
}

SOAP_SOCKET BaitourServiceSoapService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET BaitourServiceSoapService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int BaitourServiceSoapService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int BaitourServiceSoapService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns1__GetAllCommonPolicy(BaitourServiceSoapService*);
static int serve___ns1__GetAllCommonPolicyZIP(BaitourServiceSoapService*);
static int serve___ns1__GetAlterCommonPolicy(BaitourServiceSoapService*);
static int serve___ns1__MatchCommonPolicy(BaitourServiceSoapService*);
static int serve___ns1__GetAVPolicy(BaitourServiceSoapService*);
static int serve___ns1__GetDomesticMatchNormalZRateByID(BaitourServiceSoapService*);
static int serve___ns1__DetailCreateOrder(BaitourServiceSoapService*);
static int serve___ns1__RTCreateOrder(BaitourServiceSoapService*);
static int serve___ns1__GetOrderInfo(BaitourServiceSoapService*);
static int serve___ns1__GetInvalidationProviders(BaitourServiceSoapService*);
static int serve___ns1__RefundOrder(BaitourServiceSoapService*);
static int serve___ns1__GetChangeFlightDate(BaitourServiceSoapService*);

int BaitourServiceSoapService::dispatch()
{	BaitourServiceSoapService_init(this->soap->imode, this->soap->omode);
	soap_peek_element(this->soap);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAllCommonPolicy"))
		return serve___ns1__GetAllCommonPolicy(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAllCommonPolicyZIP"))
		return serve___ns1__GetAllCommonPolicyZIP(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAlterCommonPolicy"))
		return serve___ns1__GetAlterCommonPolicy(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:MatchCommonPolicy"))
		return serve___ns1__MatchCommonPolicy(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetAVPolicy"))
		return serve___ns1__GetAVPolicy(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetDomesticMatchNormalZRateByID"))
		return serve___ns1__GetDomesticMatchNormalZRateByID(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:DetailCreateOrder"))
		return serve___ns1__DetailCreateOrder(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:RTCreateOrder"))
		return serve___ns1__RTCreateOrder(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetOrderInfo"))
		return serve___ns1__GetOrderInfo(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetInvalidationProviders"))
		return serve___ns1__GetInvalidationProviders(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:RefundOrder"))
		return serve___ns1__RefundOrder(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "ns1:GetChangeFlightDate"))
		return serve___ns1__GetChangeFlightDate(this);
	return this->soap->error = SOAP_NO_METHOD;
}

static int serve___ns1__GetAllCommonPolicy(BaitourServiceSoapService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAllCommonPolicy soap_tmp___ns1__GetAllCommonPolicy;
	_ns1__GetAllCommonPolicyResponse ns1__GetAllCommonPolicyResponse;
	ns1__GetAllCommonPolicyResponse.soap_default(soap);
	soap_default___ns1__GetAllCommonPolicy(soap, &soap_tmp___ns1__GetAllCommonPolicy);
	if (!soap_get___ns1__GetAllCommonPolicy(soap, &soap_tmp___ns1__GetAllCommonPolicy, "-ns1:GetAllCommonPolicy", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAllCommonPolicy(soap_tmp___ns1__GetAllCommonPolicy.ns1__GetAllCommonPolicy, &ns1__GetAllCommonPolicyResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAllCommonPolicyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAllCommonPolicyResponse.soap_put(soap, "ns1:GetAllCommonPolicyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAllCommonPolicyResponse.soap_put(soap, "ns1:GetAllCommonPolicyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAllCommonPolicyZIP(BaitourServiceSoapService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAllCommonPolicyZIP soap_tmp___ns1__GetAllCommonPolicyZIP;
	_ns1__GetAllCommonPolicyZIPResponse ns1__GetAllCommonPolicyZIPResponse;
	ns1__GetAllCommonPolicyZIPResponse.soap_default(soap);
	soap_default___ns1__GetAllCommonPolicyZIP(soap, &soap_tmp___ns1__GetAllCommonPolicyZIP);
	if (!soap_get___ns1__GetAllCommonPolicyZIP(soap, &soap_tmp___ns1__GetAllCommonPolicyZIP, "-ns1:GetAllCommonPolicyZIP", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAllCommonPolicyZIP(soap_tmp___ns1__GetAllCommonPolicyZIP.ns1__GetAllCommonPolicyZIP, &ns1__GetAllCommonPolicyZIPResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAllCommonPolicyZIPResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAllCommonPolicyZIPResponse.soap_put(soap, "ns1:GetAllCommonPolicyZIPResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAllCommonPolicyZIPResponse.soap_put(soap, "ns1:GetAllCommonPolicyZIPResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAlterCommonPolicy(BaitourServiceSoapService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAlterCommonPolicy soap_tmp___ns1__GetAlterCommonPolicy;
	_ns1__GetAlterCommonPolicyResponse ns1__GetAlterCommonPolicyResponse;
	ns1__GetAlterCommonPolicyResponse.soap_default(soap);
	soap_default___ns1__GetAlterCommonPolicy(soap, &soap_tmp___ns1__GetAlterCommonPolicy);
	if (!soap_get___ns1__GetAlterCommonPolicy(soap, &soap_tmp___ns1__GetAlterCommonPolicy, "-ns1:GetAlterCommonPolicy", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAlterCommonPolicy(soap_tmp___ns1__GetAlterCommonPolicy.ns1__GetAlterCommonPolicy, &ns1__GetAlterCommonPolicyResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAlterCommonPolicyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAlterCommonPolicyResponse.soap_put(soap, "ns1:GetAlterCommonPolicyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAlterCommonPolicyResponse.soap_put(soap, "ns1:GetAlterCommonPolicyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__MatchCommonPolicy(BaitourServiceSoapService *service)
{	struct soap *soap = service->soap;
	struct __ns1__MatchCommonPolicy soap_tmp___ns1__MatchCommonPolicy;
	_ns1__MatchCommonPolicyResponse ns1__MatchCommonPolicyResponse;
	ns1__MatchCommonPolicyResponse.soap_default(soap);
	soap_default___ns1__MatchCommonPolicy(soap, &soap_tmp___ns1__MatchCommonPolicy);
	if (!soap_get___ns1__MatchCommonPolicy(soap, &soap_tmp___ns1__MatchCommonPolicy, "-ns1:MatchCommonPolicy", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->MatchCommonPolicy(soap_tmp___ns1__MatchCommonPolicy.ns1__MatchCommonPolicy, &ns1__MatchCommonPolicyResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__MatchCommonPolicyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__MatchCommonPolicyResponse.soap_put(soap, "ns1:MatchCommonPolicyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__MatchCommonPolicyResponse.soap_put(soap, "ns1:MatchCommonPolicyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAVPolicy(BaitourServiceSoapService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetAVPolicy soap_tmp___ns1__GetAVPolicy;
	_ns1__GetAVPolicyResponse ns1__GetAVPolicyResponse;
	ns1__GetAVPolicyResponse.soap_default(soap);
	soap_default___ns1__GetAVPolicy(soap, &soap_tmp___ns1__GetAVPolicy);
	if (!soap_get___ns1__GetAVPolicy(soap, &soap_tmp___ns1__GetAVPolicy, "-ns1:GetAVPolicy", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAVPolicy(soap_tmp___ns1__GetAVPolicy.ns1__GetAVPolicy, &ns1__GetAVPolicyResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetAVPolicyResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAVPolicyResponse.soap_put(soap, "ns1:GetAVPolicyResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAVPolicyResponse.soap_put(soap, "ns1:GetAVPolicyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetDomesticMatchNormalZRateByID(BaitourServiceSoapService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetDomesticMatchNormalZRateByID soap_tmp___ns1__GetDomesticMatchNormalZRateByID;
	_ns1__GetDomesticMatchNormalZRateByIDResponse ns1__GetDomesticMatchNormalZRateByIDResponse;
	ns1__GetDomesticMatchNormalZRateByIDResponse.soap_default(soap);
	soap_default___ns1__GetDomesticMatchNormalZRateByID(soap, &soap_tmp___ns1__GetDomesticMatchNormalZRateByID);
	if (!soap_get___ns1__GetDomesticMatchNormalZRateByID(soap, &soap_tmp___ns1__GetDomesticMatchNormalZRateByID, "-ns1:GetDomesticMatchNormalZRateByID", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetDomesticMatchNormalZRateByID(soap_tmp___ns1__GetDomesticMatchNormalZRateByID.ns1__GetDomesticMatchNormalZRateByID, &ns1__GetDomesticMatchNormalZRateByIDResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetDomesticMatchNormalZRateByIDResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetDomesticMatchNormalZRateByIDResponse.soap_put(soap, "ns1:GetDomesticMatchNormalZRateByIDResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetDomesticMatchNormalZRateByIDResponse.soap_put(soap, "ns1:GetDomesticMatchNormalZRateByIDResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__DetailCreateOrder(BaitourServiceSoapService *service)
{	struct soap *soap = service->soap;
	struct __ns1__DetailCreateOrder soap_tmp___ns1__DetailCreateOrder;
	_ns1__DetailCreateOrderResponse ns1__DetailCreateOrderResponse;
	ns1__DetailCreateOrderResponse.soap_default(soap);
	soap_default___ns1__DetailCreateOrder(soap, &soap_tmp___ns1__DetailCreateOrder);
	if (!soap_get___ns1__DetailCreateOrder(soap, &soap_tmp___ns1__DetailCreateOrder, "-ns1:DetailCreateOrder", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DetailCreateOrder(soap_tmp___ns1__DetailCreateOrder.ns1__DetailCreateOrder, &ns1__DetailCreateOrderResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__DetailCreateOrderResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__DetailCreateOrderResponse.soap_put(soap, "ns1:DetailCreateOrderResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__DetailCreateOrderResponse.soap_put(soap, "ns1:DetailCreateOrderResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__RTCreateOrder(BaitourServiceSoapService *service)
{	struct soap *soap = service->soap;
	struct __ns1__RTCreateOrder soap_tmp___ns1__RTCreateOrder;
	_ns1__RTCreateOrderResponse ns1__RTCreateOrderResponse;
	ns1__RTCreateOrderResponse.soap_default(soap);
	soap_default___ns1__RTCreateOrder(soap, &soap_tmp___ns1__RTCreateOrder);
	if (!soap_get___ns1__RTCreateOrder(soap, &soap_tmp___ns1__RTCreateOrder, "-ns1:RTCreateOrder", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->RTCreateOrder(soap_tmp___ns1__RTCreateOrder.ns1__RTCreateOrder, &ns1__RTCreateOrderResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__RTCreateOrderResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__RTCreateOrderResponse.soap_put(soap, "ns1:RTCreateOrderResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__RTCreateOrderResponse.soap_put(soap, "ns1:RTCreateOrderResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetOrderInfo(BaitourServiceSoapService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetOrderInfo soap_tmp___ns1__GetOrderInfo;
	_ns1__GetOrderInfoResponse ns1__GetOrderInfoResponse;
	ns1__GetOrderInfoResponse.soap_default(soap);
	soap_default___ns1__GetOrderInfo(soap, &soap_tmp___ns1__GetOrderInfo);
	if (!soap_get___ns1__GetOrderInfo(soap, &soap_tmp___ns1__GetOrderInfo, "-ns1:GetOrderInfo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetOrderInfo(soap_tmp___ns1__GetOrderInfo.ns1__GetOrderInfo, &ns1__GetOrderInfoResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetOrderInfoResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetOrderInfoResponse.soap_put(soap, "ns1:GetOrderInfoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetOrderInfoResponse.soap_put(soap, "ns1:GetOrderInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetInvalidationProviders(BaitourServiceSoapService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetInvalidationProviders soap_tmp___ns1__GetInvalidationProviders;
	_ns1__GetInvalidationProvidersResponse ns1__GetInvalidationProvidersResponse;
	ns1__GetInvalidationProvidersResponse.soap_default(soap);
	soap_default___ns1__GetInvalidationProviders(soap, &soap_tmp___ns1__GetInvalidationProviders);
	if (!soap_get___ns1__GetInvalidationProviders(soap, &soap_tmp___ns1__GetInvalidationProviders, "-ns1:GetInvalidationProviders", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetInvalidationProviders(soap_tmp___ns1__GetInvalidationProviders.ns1__GetInvalidationProviders, &ns1__GetInvalidationProvidersResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetInvalidationProvidersResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetInvalidationProvidersResponse.soap_put(soap, "ns1:GetInvalidationProvidersResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetInvalidationProvidersResponse.soap_put(soap, "ns1:GetInvalidationProvidersResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__RefundOrder(BaitourServiceSoapService *service)
{	struct soap *soap = service->soap;
	struct __ns1__RefundOrder soap_tmp___ns1__RefundOrder;
	_ns1__RefundOrderResponse ns1__RefundOrderResponse;
	ns1__RefundOrderResponse.soap_default(soap);
	soap_default___ns1__RefundOrder(soap, &soap_tmp___ns1__RefundOrder);
	if (!soap_get___ns1__RefundOrder(soap, &soap_tmp___ns1__RefundOrder, "-ns1:RefundOrder", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->RefundOrder(soap_tmp___ns1__RefundOrder.ns1__RefundOrder, &ns1__RefundOrderResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__RefundOrderResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__RefundOrderResponse.soap_put(soap, "ns1:RefundOrderResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__RefundOrderResponse.soap_put(soap, "ns1:RefundOrderResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetChangeFlightDate(BaitourServiceSoapService *service)
{	struct soap *soap = service->soap;
	struct __ns1__GetChangeFlightDate soap_tmp___ns1__GetChangeFlightDate;
	_ns1__GetChangeFlightDateResponse ns1__GetChangeFlightDateResponse;
	ns1__GetChangeFlightDateResponse.soap_default(soap);
	soap_default___ns1__GetChangeFlightDate(soap, &soap_tmp___ns1__GetChangeFlightDate);
	if (!soap_get___ns1__GetChangeFlightDate(soap, &soap_tmp___ns1__GetChangeFlightDate, "-ns1:GetChangeFlightDate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetChangeFlightDate(soap_tmp___ns1__GetChangeFlightDate.ns1__GetChangeFlightDate, &ns1__GetChangeFlightDateResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__GetChangeFlightDateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetChangeFlightDateResponse.soap_put(soap, "ns1:GetChangeFlightDateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetChangeFlightDateResponse.soap_put(soap, "ns1:GetChangeFlightDateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
